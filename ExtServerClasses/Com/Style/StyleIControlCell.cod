extends Com.Ctrl.IControlCell "";
Import Com.Utils, Com.Consts, Com.Lib;

--линки на расширения
--Link:Com.Ctrl.IControlCell  -- Базовый класс
inclass public

  #Override;
  func NamedClassStyleIni :Storage; -- добавление стилей с учетом наследования
    Result = Inherited NamedClassStyleIni;
    if Result.NotPadding = nil:
      Result.NotPadding = Storage.Create;
    fi;
    Result.NotPadding.padding = CreateStorage(['Value','0', 'ReWrite',true]); -- переписываем только свойство padding
  end;

inclass private
  #Override;
  func SetDefClassStyle(aSelf :Com.Ctrl.IControl; var aStyle :Storage; aIndex :Integer = 1) :Logical;
    var vSelf = aSelf as Com.Ctrl.IControlCell;
    Result =  Inherited SetDefClassStyle(vSelf, aStyle, aIndex);
    ---- дополнительные обработчики класса ----
    if Result and aSelf.ExtP?.NotPadding as Logical:
       aStyle = ChangeStyle(NamedClassStyle?.NotPadding, aStyle);
    fi;
  end;

inobject public
  -- полностью перекрыт JsonStyleStore - для реализации проброса данных стиля через Com.Ctrl.IFont
  -- теперь в OnColumnDraw и OnDraw можно через IFont.AddStyle менять web style
  #Override;
  func JsonStyleStore(aIndex :Integer = 1) :Storage; -- StyleParams
    Result = inherited JsonStyleStore(aIndex);
    if MinWidth <> 0 then
      Result.Items['minWidth'] = MinWidth;
    end;
    if MaxWidth <> 0 then
      Result.Items['maxWidth'] = MaxWidth;
    end;
    if FieldColor <> clNoColor then
      Result.backgroundColor = ColorToJSON(FieldColor);
    end;
    if OnDraw <> nil or OnColumnDraw <> nil then
      var vColor      = Color;
      var vFieldColor = FieldColor;
      var vFont       = Com.Ctrl.IFont.Create;
      vFont.Name   = FontName;
      vFont.Size   = FontSize;
      vFont.Bold   = FontBold;
      vFont.Italic = FontItalic;
      vFont.Color  = FontColor;
      if OnDraw <> nil then
        OnDraw(Self, aIndex, nil, vColor, vFieldColor, vFont); -- aSelected - на сервере пока не реализовано
      elsif OnColumnDraw <> nil then
        OnColumnDraw(Self, Com.Frm.ICardForm(Owner).Current, nil, vFieldColor, vFont);
      end;
      if FontName <> vFont.Name then
        if vFont.Name = '' then
          Result.DeleteField('fontFamily');
        else
          Result.fontFamily = vFont.Name;
        end;
      end;
      if FontSize <> vFont.Size then
        if vFont.Size = 0 then
          Result.DeleteField('fontSize');
        else
          Result.fontSize = Str(vFont.Size + 4) + 'px';
        end;
      end;
      if FontBold <> vFont.Bold then
        if not vFont.Bold then
          Result.DeleteField('fontWeight');
        else
          Result.fontWeight = 'bold';
        end;
      end;
      if FontItalic <> vFont.Italic then
        if not vFont.Italic then
          Result.DeleteField('fontStyle');
        else
          Result.fontStyle = 'italic';
        end;
      end;
      if FontColor <> vFont.Color then
        if vFont.Color = clNoColor then
          Result.DeleteField('color');
        else
          Result.color = ColorToJSON(vFont.Color);
        end;
      end;
      if FieldColor <> vFieldColor then
        if vFieldColor = clNoColor then
          Result.DeleteField('backgroundColor');
        else
          Result.backgroundColor = ColorToJSON(vFieldColor);
        end;
      end;
      #Warning 'Нужен постоянный контроль Com.Ctrl.IControlCell.JsonStyleStore на изменения т.к. метод полностью перекрыт';
      if vFont.AddStyle <> nil: -- добавлен проброс AddStyle :Storage через расширение  Com.Ctrl.IFont (в IFont добавлен AddStyle)
        Result = ChangeStyle(vFont.AddStyle, Result);
      fi;
    end;
  end;


end